const findUp = require("find-up");
const fs = require('fs');
const path = require('path');
const readline = require('readline');
const glob = require('glob');

function getVersion() {
    return JSON.parse(fs.readFileSync(path.join(__dirname, "../package.json"))).version;
}

let removeDecorators = false;

export async function cli(args) {
    if (args[2] == "help" || args[2] == "--help") {
        console.log(chalk.green("Help:\nPlease see https://github.com/hrueger/redundancyjs/blob/master/README.md"));
        process.exit();
    }
    if (args[2] == "version" || args[2] == "--version") {
        console.log(chalk.green(`v${getVersion()}`));
        process.exit();
    }

    const configJsonPath = await findUp("redundancy.json");
    if (configJsonPath) {
        try {
            const content = JSON.parse(fs.readFileSync(configJsonPath));
            const baseDir = path.dirname(configJsonPath);
            const files = [];
            for (const file of content.files) {
                file.src = path.join(baseDir, file.src);
                file.dest = path.join(baseDir, file.dest);
                if ((file.src.match(/\*/g) || []).length > 1) {
                    throw Error("The source path can't contain more than one *.");
                }
                if ((file.dest.match(/\*/g) || []).length > 0) {
                    throw Error("The dest path can't contain a *.");
                }
                const fls = glob.sync(file.src);
                if (fls.length) {
                    for (let f of fls) {
                        f = path.normalize(f);
                        files.push({
                            src: f,
                            dest: path.join(f.replace(f.split(("*")[0]), file.dest), path.basename(f)),
                            removeDecorators: file.removeDecorators,
                        });
                    }
                } else {
                    files.push(file);
                }

            }
            for (let file of files) {
                removeDecorators = file.removeDecorators;
                const readFile = readline.createInterface({
                    input: fs.createReadStream(file.src),
                    output: fs.createWriteStream(file.dest),
                    terminal: false
                });

                await new Promise((resolve, reject) => {
                    readFile.on('line', transform).on('close', () => {
                        resolve();
                    });
                });

            }
        } catch (e) {
            console.log(e);
            process.exit(1);
        }
    } else {
        console.log("Error: no \"redundancy.json\" file was found.");
        process.exit(1);
    }
}

function transform(line) {
    if (!this.first) {
        this.first = true;
        this.output.write(`
/*    +-----------------------------------------------------------------------+    */
/*    |    Do not edit this file directly.                                    |    */
/*    |    It was copied by redundancyJS.                                     |    */
/*    |    To modify it, first edit the source file (see redundancy.json).    |    */
/*    |    Then, run "npx redundancyjs" in the terminal.                      |    */
/*    +-----------------------------------------------------------------------+    */

`)
    }
    if (removeDecorators) {
        console.log("remove d");
        line = line.replace(/@[^(]*\([^)]*\)/g, "");
    }
    this.output.write(`/* do not edit */${line ? ` ${line}` : ""}\n`);
}